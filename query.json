[
    {
        "question": "1.Get the total number of orders placed by each customer",
        "query": "SELECT Customers.Customer_id,COUNT(Orders.Order_id) AS TotalOrders <br>  FROM Customers </br> JOIN Orders ON Customers.Customer_id = Orders.Customer_id  GROUP BY Customers.Customer_id <br> ORDER BY TotalOrders DESC;"
    },
    {
        "question": "2.Find all suppliers who provide products in the ‘Seafood’ category",
        "query": "SELECT DISTINCT Suppliers.contact_Name FROM Suppliers JOIN Products ON Suppliers.Supplier_ID = Products.Supplier_ID JOIN Categories ON Products.Category_ID = Categories.Category_ID WHERE Categories.Category_Name = 'Seafood';"
    },
    {
        "question": "3.Get the total quantity of each product sold",
        "query": "SELECT Products.product_Name, SUM(Order_Details.Quantity) AS TotalQuantitySold FROM Order_Details  JOIN Products ON Order_Details.Product_ID = Products.Product_ID   GROUP BY Products.product_Name;"
    },
    {
        "question": "4.Find the total sales (Quantity*Unit_Price) for each category of products ",
        "query": "SELECT Categories.Category_Name, SUM(Order_Details.Quantity * Order_Details.Unit_Price) AS TotalSales  FROM Order_Details  JOIN Products ON Order_Details.Product_ID = Products.Product_ID  JOIN Categories ON Products.Category_ID = Categories.Category_ID  GROUP BY Categories.Category_Name; "
    },
    {
        "question": "5.List the employees and the number of orders each employee has taken ",
        "query": " SELECT Employees.Employee_ID, Employees.First_Name, Employees.Last_Name, COUNT(Orders.Order_ID) AS NumberOfOrders  FROM Employees  LEFT JOIN Orders ON Employees.Employee_ID = Orders.Employee_ID  GROUP BY Employees.Employee_ID, Employees.First_Name, Employees.Last_Name;"
    },
    {
        "question": "6.Get the customers who have placed more than 10 orders ",
        "query": "SELECT Customers.Customer_ID, Customers.contact_Name, COUNT(Orders.Order_ID) AS TotalOrders   FROM Customers  JOIN Orders ON Customers.Customer_ID = Orders.Customer_ID  GROUP BY Customers.Customer_ID, Customers.Contact_Name  HAVING COUNT(Orders.Order_ID) > 10; "
    },
    {
        "question": "7.Get the top 5 most sold products ",
        "query": " SELECT Products.Product_Name, SUM(Order_Details.Quantity) AS TotalQuantitySold   FROM Order_Details  JOIN Products ON Order_Details.Product_ID = Products.Product_ID  GROUP BY Products.Product_Name  ORDER BY TotalQuantitySold DESC  LIMIT 5;"
    },
    {
        "question": "8.Find the products that have never been ordered ",
        "query": "SELECT Products.Product_Name FROM Products  LEFT JOIN Order_Details ON Products.Product_ID = Order_Details.Product_ID  WHERE Order_Details.Order_ID IS NULL; "
    },
    {
        "question": "9.Find the customers who have not placed any orders ",
        "query": " SELECT Customers.Customer_ID, Customers.contact_Name  FROM Customers  LEFT JOIN Orders ON CustomersCustomer_ID=Orders.Customer_IDWHERE Orders.Order_ID IS NULL;"
    },
    {
        "question": "10.List all ‘Orders’ with ‘Customer’ details and ‘Employee’ who processed it ",
        "query": "SELECT Orders.Order_ID, Customers.Customer_ID, Customers.Contact_Name, Employees.Employee_ID, Employees.First_Name, Employees.Last_Name FROM Orders  JOIN Customers ON Orders.Customer_ID = Customers.Customer_ID  JOIN Employees ON Orders.Employee_ID = Employees.Employee_ID; "
    },
    {
        "question": "11. Calculate the average product price by category ",
        "query": "SELECT Categories.Category_Name, AVG(Products.Unit_Price) AS AveragePrice FROM Products JOIN Categories ON Products.Category_ID = Categories.Category_ID GROUP BY Categories.Category_Name;;"
    },
    {
        "question": "12.Find the total revenue generated by each employee",
        "query": "SELECT Employees.Employee_ID, Employees.First_Name, Employees.Last_Name, SUM(Order_Details.Quantity * Order_Details.Unit_Price) AS TotalRevenue FROM Orders JOIN Order_Details ON Orders.Order_ID = Order_Details.Order_ID JOIN Employees ON Orders.Employee_ID = Employees.Employee_ID GROUP BY Employees.Employee_ID, Employees.First_Name, Employees.Last_Name; "
    },
    {
        "question": " 13.List all orders shipped to ‘Germany’",
        "query": "SELECT Orders.Order_ID, Customers.Customer_ID, Customers.Contact_Name, Employees.Employee_ID, Employees.First_Name, Employees.Last_Name FROM Orders JOIN Customers ON Orders.Customer_ID = Customers.Customer_ID JOIN Employees ON Orders.Employee_ID = Employees.Employee_ID; "
    },
    {
        "question": "14. Find the most expensive product in each category ",
        "query": "SELECT Categories.Category_Name, MAX(Products.Unit_Price) AS MaxPrice FROM Products JOIN Categories ON Products.Category_ID = Categories.Category_ID GROUP BY Categories.Category_Name; "
    },
    {
        "question": " 15.Find the total revenue for the year 2016",
        "query": "SELECT SUM(Order_Details.Quantity * products.Unit_Price) AS TotalRevenue FROM Orders,products JOIN Order_Details ON Orders.Order_ID = Order_Details.Order_ID WHERE Orders.Order_Date >= '2016-01-01' AND Orders.Order_Date <= '2016-12-31'; "
    },
    {
        "question": "16.List all products that are discontinued ",
        "query": "SELECT *  FROM Products  WHERE Discontinued = 1;"
    },
    {
        "question": "17.List all the distinct countries to which orders have been shipped ",
        "query": " SELECT DISTINCT ShipCountry  FROM Orders;"
    },
    {
        "question": "18.Find all employees who report to ‘Andrew Fuller’",
        "query": "SELECT Employee_ID, First_Name, Last_Name FROM Employees WHERE ReportsTo = ( SELECT Employee_ID FROM Employees WHERE First_Name = 'Andrew' AND Last_Name = 'Fuller' ); "
    },
    {
        "question": " 19.Find the customers who have spent more than $5000 in total",
        "query": "SELECT Customers.Customer_ID, Customers.contact_Name, SUM(Orders.freight) AS TotalSpent FROM Customers JOIN Orders ON Customers.Customer_ID = Orders.Customer_ID GROUP BY Customers.Customer_ID, Customers.Contact_Name HAVING SUM(Orders.frright) > 5000; "
    },
    {
        "question": "20.List the top 5 employees who have processed the most orders ",
        "query": " SELECT Employees.Employee_ID, Employees.First_Name, Employees.Last_Name, COUNT(Orders.Order_ID) AS OrderCount FROM Employees JOIN Orders ON Employees.Employee_ID = Orders.Employee¬_ID GROUP BY Employees.Employee_ID, Employees.First_Name, Employees.Last_Name ORDER BY OrderCount DESC LIMIT 5;"
    },
    {
        "question": "21.Get the list of customers who have ordered ‘Chai’ product ",
        "query": " SELECT Customers.Customer_ID, Customers.Contact_Name FROM Customers JOIN Orders ON Customers.Customer_ID = Orders.Customer_ID JOIN Order_Details ON Orders.Order_ID = Order_Details.Order_ID JOIN Products ON Order_Details.Product_ID = Products.Product_ID WHERE Products.Product_Name = 'Chai';"
    },
    {
        "question": "22.Get the employees who have processed orders for ‘Chai’ product ",
        "query": " SELECT DISTINCT Employees.Employee_ID, Employees.First_Name, Employees.Last_Name FROM Employees JOIN Orders ON Employees.Employee_ID = Orders.Employee_ID JOIN Order_Details ON Orders.Order_ID = Order_Details.Order_ID JOIN Products ON Order_Details.Product_ID = Products.Product_ID WHERE Products.Product_Name = 'Chai';"
    },
    {
        "question": "23.Find the most common shipping country ",
        "query": "SELECT Ship_Country, COUNT(*) AS Count  FROM Orders  GROUP BY Ship_Country  ORDER BY Count DESC  LIMIT 1; "
    },
    {
        "question": "24.Find the order with the highest total cost ",
        "query": "SELECT *  FROM Orders  ORDER BY TotalCost DESC  LIMIT 1; "
    },
    {
        "question": "25.Find the employees who have processed more than 100 orders ",
        "query": "SELECT Employees.Employee_ID, Employees.First_Name, Employees.Last_Name, COUNT(Orders.Order_ID) AS OrderCount FROM Employees JOIN Orders ON Employees.Employee_ID = Orders.Employee_ID GROUP BY Employees.Employee_ID, Employees.First_Name, Employees.Last_Name HAVING COUNT(Orders.Order_ID) > 100; "
    },
    {
        "question": "26.Find the customer who has ordered the most ‘Chai’ product ",
        "query": "SELECT Customers.Customer_ID, Customers.Contact_Name, COUNT(*) AS OrderCount FROM Customers JOIN Orders ON Customers.Customer_ID = Orders.Customer_ID JOIN Order_Details ON Orders.Order_ID = Order_Details.Order_ID JOIN Products ON Order_Details.Product_ID = Products.Product_ID WHERE Products.Product_Name = 'Chai' GROUP BY Customers.Customer_ID, Customers.Contact_Name ORDER BY OrderCount DESC LIMIT 1; "
    },
    {
        "question": "27.Find the average quantity of products ordered in each order ",
        "query": "SELECT Orders.Order_ID, AVG(Order_Details.Quantity) AS AverageQuantity FROM Orders JOIN Order_Details ON Orders.Order_ID = Order_Details.Order_ID GROUP BY Orders.Order_ID; "
    },
    {
        "question": "28.Find the top 3 most popular categories of products ordered ",
        "query": "SELECT Categories.Category_Name, COUNT(*) AS OrderCount FROM Categories JOIN Products ON Categories.Category_ID = Products.Category_ID JOIN Order_Details ON Products.Product_ID = Order_Details.Product_ID JOIN Orders ON Order_Details.Order_ID = Orders.Order_ID GROUP BY Categories.Category_Name ORDER BY OrderCount DESC LIMIT 3;"
    },
    {
        "question": "31. Find the top 3 customers who have ordered the most products",
        "query": "SELECT Customers.Customer_ID, Customers.Contact_Name, COUNT(*) AS TotalProducts FROM Customers JOIN Orders ON Customers.Customer_ID = Orders.Customer_ID JOIN Order_Details ON Orders.Order_ID = Order_Details.Order_ID GROUP BY Customers.Customer_ID, Customers.Contact_Name ORDER BY TotalProducts DESC LIMIT 3; "
    },
    {
        "question": "32. Find the employees who have not processed any orders",
        "query": "SELECT Employees.Employee_ID, Employees.First_Name, Employees.Last_Name FROM Employees LEFT JOIN Orders ON Employees.Employee_ID = Orders.Employee_ID WHERE Orders.Employee_ID IS NULL; "
    },
    {
        "question": "33. Find the suppliers who supply the top 5 most sold products ",
        "query": "SELECT Suppliers.Supplier_ID, Suppliers.contact_Name, COUNT(*) AS ProductCount FROM Suppliers JOIN Products ON Suppliers.Supplier_ID = Products.Supplier_ID JOIN Order_Details ON Products.Product_ID = Order_Details.Product_ID GROUP BY Suppliers.Supplier_ID, Suppliers.contact_Name ORDER BY ProductCount DESC "
    },
    {
        "question": "34. Find the customers who have ordered products from all categories ",
        "query": " SELECT Customers.Customer_ID, Customers.Contact_Name FROM Customers JOIN Orders ON Customers.Customer_ID = Orders.Customer_ID JOIN Order_Details ON Orders.Order_ID = Order_Details.Order_ID JOIN Products ON Order_Details.Product_ID = Products.Product_ID GROUP BY Customers.Customer_ID, Customers.Contact_Name HAVING COUNT(DISTINCT Products.Category_ID) = ( SELECT COUNT(*) FROM Categories );"
    },
    {
        "question": "35. Find the total sales for each year ",
        "query": " NA"
    },
    {
        "question": "36.Classify customers based on their total order amounts such that total order amounts > 5000 should be classified as ‘High Value’, if > 1000 then as ‘Medium Value’ and otherwise as ‘Low Value’",
        "query": "SELECT Customers.Customer_ID, Customers.Contact_Name, SUM(Orders.freight) AS TotalOrderAmount, CASE WHEN SUM(Orders.freight) > 5000 THEN 'High Value' WHEN SUM(Orders.freight) > 1000 THEN 'Medium Value' ELSE 'Low Value' END AS Classification FROM Customers JOIN Orders ON Customers.Customer_ID = Orders.Customer_ID GROUP BY Customers.Customer_ID, Customers.Contact_Name; "
    },
    {
        "question": "37. Classify products based on their sales volume such that TotalQuantity > 1000 Then SalesCategory as ‘High Sales’. If TotalQuantity>500 Then ‘Medium Sales’ and else ‘Lower Sales’",
        "query": " SELECT Products.Product_ID, Products.Product_Name, SUM(Order_Details.Quantity) AS TotalQuantity, CASE WHEN SUM(Order_Details.Quantity) > 1000 THEN 'High Sales' WHEN SUM(Order_Details.Quantity) > 500 THEN 'Medium Sales' ELSE 'Lower Sales' END AS SalesCategory FROM Products JOIN Order_Details ON Products.Product_ID = Order_Details.Product_ID GROUP BY Products.Product_ID, Products.Product_Name;"
    },
    {
        "question": "38. Classify employees based on the number of orders they have processed such that NumberOfOrders > 100 Then PerformanceCategory as ‘High Performing’. If NumberOfOrders>50 Then ‘Medium Performing’ and else ‘Lower Performing’",
        "query": " SELECT Employees.Employee_ID, Employees.First_Name, Employees.Last_Name, COUNT(Orders.Order_ID) AS NumberOfOrders, CASE WHEN COUNT(Orders.Order_ID) > 100 THEN 'High Performing' WHEN COUNT(Orders.Order_ID) > 50 THEN 'Medium Performing' ELSE 'Lower Performing' END AS PerformanceCategory FROM Employees LEFT JOIN Orders ON Employees.Employee_ID = Orders.Employee_ID GROUP BY Employees.Employee_ID, Employees.First_Name, Employees.Last_Name;"
    }
]
